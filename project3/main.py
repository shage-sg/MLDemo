# -*- coding: utf-8 -*-import numpy as npimport torch as thimport pandas as pdimport seaborn as snsimport matplotlib.pyplot as pltnp.random.seed(1)th.manual_seed(1)sns.set_style("darkgrid")#%% 载入数据data = pd.read_csv('credit_card_default.csv', sep=',')data.info()data.describe()#%% 数据集from dataset import CreditDefaultDataset# 准备置乱数据population = data.shape[0]idx = np.random.permutation(population)# 划分训练集、验证集、测试集，各有 21000、3000、6000 个样本trainset = CreditDefaultDataset(data.loc[idx[:21000]], tag='train')valset = CreditDefaultDataset(data.loc[idx[21000:24000]], tag='validation', \                             feature_mean=trainset.mean, feature_std=trainset.std)testset = CreditDefaultDataset(data.loc[idx[24000:]], tag='test', \                             feature_mean=trainset.mean, feature_std=trainset.std)#%% 数据可视化from sklearn.decomposition import PCApca = PCA(n_components=2)vis_feature = pca.fit_transform(trainset.feature)vis_feature = pd.DataFrame(vis_feature, columns=['x1', 'x2'])vis_feature['default'] = trainset.label.flatten()sns.relplot(data=vis_feature, x='x1', y='x2', hue='default', palette='coolwarm')#%% 模型from torch import nnfeature_nums = trainset.feature.shape[1]model = nn.Linear(feature_nums, 1)#%% 训练from train import trainer# 训练器配置参数config = {'epoches': 6, 'batchsize':100, 'lr':0.03}trainloss, auc_list, _ = trainer(trainset, valset, model, config)plt.figure()plt.plot(trainloss)plt.xlabel('iteration')plt.ylabel('loss')plt.title('training process')#%% 测试# TODO: 实现 utils 中的有关函数from utils import classification_metric, roc_metrictest_feature, test_label = testset[:]with th.no_grad():    test_pred = th.sigmoid(model(test_feature))auc, tpr, fpr, thresholds = roc_metric(test_pred.flatten(), test_label.flatten())print(f'AUC: {auc:.2f}')# 利用G-Mean确定最佳阈值gmean = np.sqrt(np.array(tpr) * (1 - np.array(fpr)))idx = np.argmax(gmean)best_thr = thresholds[idx]print(f'最佳分类阈值: {best_thr:.2f}')accuracy, precision, recall, F1 = classification_metric(test_pred.flatten(), test_label.flatten(), best_thr)print(f'精确率: {accuracy:.2f}, 查准率: {precision:.2f}, 查全率: {recall:.2f}, F1值: {F1:.2f}')# 绘制分类器 ROC 曲线plt.figure()plt.plot(fpr, tpr)plt.xlabel('FPR')plt.ylabel('TPR')plt.title('ROC')#%% 可视化测试结果pca = PCA(n_components=2)vis_test_feature = pca.fit_transform(test_feature)vis_test_feature = pd.DataFrame(vis_test_feature, columns=['x1', 'x2'])vis_test_feature['true label'] = test_label.flatten()sns.relplot(data=vis_test_feature, x='x1', y='x2', hue='true label', palette='coolwarm')pred_test_label = (test_pred > best_thr).type(th.float32)vis_test_feature['predict label'] = pred_test_label.flatten()sns.relplot(data=vis_test_feature, x='x1', y='x2', hue='predict label', palette='coolwarm')