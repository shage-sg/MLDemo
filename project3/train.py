# -*- coding: utf-8 -*-import torch as thimport copyfrom torch import optimfrom torch.utils.data import DataLoaderfrom criterion import bcefrom utils import classification_metric, roc_metricdef trainer(trainset, valset, model, config, save_snapshot=False):    trainloss = []    auc_list   = []    snapshots = [] # 保存模型快照        train_loader = DataLoader(trainset, batch_size=config['batchsize'], shuffle=True)    val_feature, val_label = valset[:]    optimizer = optim.SGD(model.parameters(), lr=config['lr'])         for epoch in range(config['epoches']):                iteration = 0        for feature, label in train_loader:            # forward step            prediction = model(feature)            loss = bce(prediction, label) # binary cross entropy loss                        trainloss.append(loss.item())                        iteration += 1            if iteration % 10 == 0:                with th.no_grad():                    val_prediction = th.sigmoid(model(val_feature))                                accuracy, precision, recall, F1 = classification_metric(val_prediction.flatten(),\                                                                        val_label.flatten(), 0.5)                                auc, _,_,_ = roc_metric(val_prediction.detach().flatten(), \                                        val_label.flatten())                auc_list.append(auc)                print(f'epoch: {epoch} iteration: {iteration:3d}, auc: {auc:.3f} \                        accuracy: {accuracy:.3f}, precision: {precision: .3f}, \                        recall: {recall:.3f}, F1: {F1:.2f}')                            # backward step            optimizer.zero_grad()            loss.backward()                        # update parameters            optimizer.step()                        # save snapshot            if save_snapshot:                snapshots.append(copy.deepcopy(model.state_dict()))                        # 学习率每一轮递减        for g in optimizer.param_groups:            g['lr'] *= 0.7                return trainloss, auc_list, snapshots                    