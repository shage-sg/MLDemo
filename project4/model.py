# -*- coding: utf-8 -*-from torch import nnimport torch as thclass MLP(nn.Module):    def __init__(self, in_size, hidden_size, out_size):        super(MLP, self).__init__()        self.hidden_layer = nn.Linear(in_size, hidden_size)        self.output_layer = nn.Linear(hidden_size, out_size)                    def forward(self, x):        h = self.hidden_layer(x.reshape(x.shape[0], -1))        h = th.relu(h)        return self.output_layer(h)if __name__ == '__main__':    x = th.randn((10, 28, 28), dtype=th.float32)    model = MLP(28*28, 32, 10)    y = model(x)    