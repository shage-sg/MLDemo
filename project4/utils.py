# -*- coding: utf-8 -*-import sysimport numpy as npimport torch as thimport matplotlib.pyplot as pltth.manual_seed(1)def show_mnist(X, y, n_rows, n_cols):    plt.figure()    for i in range(n_rows*n_cols):        im = X[i, :, :].reshape((28, 28))        plt.subplot(n_rows, n_cols, i+1)        plt.xticks([])        plt.ylabel('Label: {0}'.format(y[i, 0]))        plt.yticks([])        plt.imshow(im, cmap='gray', interpolation='None')    plt.show()    def confusion_matrix(pred, label, K):    cmatrix = th.zeros(K, K, dtype=th.int32)    for i in range(pred.shape[0]):        cmatrix[int(pred[i]) , int(label[i])] += 1    return cmatrixdef classification_metric(pred, label, K):    # assert pred.ndim == 1 and label.ndim == 1, '输入必须为一维向量'    cmatrix = confusion_matrix(pred, label, K)    population = float(pred.shape[0])    precision = th.empty(K)    recall = th.empty(K)    F1 = th.empty(K)    weights = th.empty(K)    for i in range(K):        TP = cmatrix[i, i]        FP = sum(cmatrix[i]) - TP        FN = sum(cmatrix[:,i]) - TP        precision[i] = TP / (TP + FP + sys.float_info.epsilon)        recall[i] = TP / (TP + FN + sys.float_info.epsilon)        F1[i] = 2 * precision[i] * recall[i] / (precision[i] + recall[i] + sys.float_info.epsilon)        weights[i] = sum(cmatrix[:,i]) / population    return precision, recall, F1, weights        def show_confusion_matrix(cmatrix):    fig, ax = plt.subplots()    ax.imshow(cmatrix, cmap='coolwarm')    ax.set_xticks(range(10), labels=[i for i in range(10)])    ax.set_yticks(range(10), labels=[i for i in range(10)])    plt.xlabel('ground-truth label')    plt.ylabel('prediction')    for i in range(10):        for j in range(10):            ax.text(j, i, cmatrix[i, j], ha="center", va="center", color="w")    ax.set_title("Confusion Matrix")    fig.tight_layout()    plt.show()if __name__ == '__main__':    pred = th.rand(5,4)    pred = th.argmax(pred, dim=1)    label = th.tensor([0,1,2,3,2])    cmatrix = confusion_matrix(pred, label, 4)    precision, recall, F1, weights = classification_metric(pred, label, 4)    show_confusion_matrix(np.round(np.random.rand(10,10)))        