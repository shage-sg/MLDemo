# -*- coding: utf-8 -*-import numpy as np# import torch as thimport pandas as pdimport seaborn as snsnp.random.seed(1)sns.set_style("darkgrid")# 分别启用下面三组数据中的一组，对比聚类结果# %% 数据集 1：红酒数据# data = pd.read_csv('winequality-red.csv', sep=';')# # 操作下列注释，比较 normalization 和 standardization# X = data.loc[:, :'alcohol'].to_numpy()# # X = (X - X.mean(axis=0)) / X.std(axis=0)# X = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))# %% 数据集 2： 鸢尾花数据data = pd.read_csv('IrisDataset/iris.data', header=None)data.columns = ['sepal_len', 'sepal_wid', 'petal_len', 'petal_wid', 'label']X = data.loc[:, :'petal_wid'].to_numpy()X = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))# %% 数据集 3： 人造数据# data = pd.read_csv('shape_sets/flame.txt', sep='\t', header=None)# data.columns = ['x1', 'x2', 'label']# X = data.loc[:, :'x2'].to_numpy()# X = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))# plt.scatter(X[:,0], X[:,1], s=20); plt.title('Data points'); plt.show()# %% 数据可视化from sklearn.decomposition import PCApca = PCA(n_components=2)# vis_feature = pca.fit_transform(data.loc[:, :'alcohol']) # 葡萄酒数据vis_feature = pca.fit_transform(data.loc[:, :'petal_wid'])  # 鸢尾花数据## LDA降维# from sklearn.discriminant_analysis import LinearDiscriminantAnalysis # lda = LinearDiscriminantAnalysis(n_components=3)# vis_feature = lda.fit_transform(data.loc[:, :'alcohol'], \#                                 data['Class'])vis_feature = pd.DataFrame(vis_feature, columns=['x1', 'x2'])# vis_feature.loc[:,'label'] = data['quality'] # 葡萄酒数据vis_feature.loc[:, 'label'] = data['label']  # 鸢尾花数据sns.relplot(data=vis_feature, x='x1', y='x2', hue='label')# %% KMeans# 实现 KMeans 的核心过程from model import KMeansfrom utils import visualize_clusterfor c in range(2, 5):    print(f'\nclusters: {c}:')    model = KMeans(c)    model.fit(X)    visualize_cluster(X, model.label)exit()# %% DPC# 对于葡萄酒数据，余弦距离搭配 normalization 在 CA 指标上的得分较高from model import DPCfor c in range(2, 5):    print(f'\nclusters: {c}:')    model = DPC(X, dc_threshold=6, dist_metric='euclidean')    model.fit()    model.show_decision_graph()    model.assign_cluster(c)    model.visualize_cluster()# %% 观察model = DPC(X, dc_threshold=6, dist_metric='euclidean')model.fit()model.show_decision_graph()model.assign_cluster(c)model.visualize_cluster()