# -*- coding: utf-8 -*-import matplotlib.pyplot as pltimport numpy as npdef cosine_distance_matrix(x):    return 1 - np.matmul(x, x.T) / np.linalg.norm(x, ord=2, axis=1, keepdims=True) / np.linalg.norm(x, ord=2, axis=1)def euclidean_distance_matrix(x):    # x is m by n matrix, m is the number of samples    p = np.sum(x ** 2, axis=1, keepdims=True)    q = np.matmul(x, x.T)    return np.sqrt(np.abs(p - 2 * q + p.T))def visualize_cluster(sample, label, size=10):    # 设定簇颜色    cdict = {-1: np.array([0, 0, 0])}  # 离群点是黑色    for i in np.unique(label):        cdict[i] = np.random.rand(3)    # 设置样本点颜色    colors = [cdict[l] for l in label]    if sample.shape[1] == 2:        X = sample    elif sample.shape[1] > 2:        # 降维        from sklearn.decomposition import PCA        pca = PCA(n_components=2)        X = pca.fit_transform(sample)    else:        return    plt.figure()    plt.scatter(X[:, 0], X[:, 1], c=colors, s=size)    plt.title('Clusters')    plt.show()def calinski_harabasz_score(sample, label, centroid=None):    CE = np.mean(sample[label != -1], axis=0)    K = np.unique(label[label != -1]).size    NE = np.sum(label != -1)    if centroid is None:        ct = []        for i in np.unique(label[label != -1]):            ct.append(np.mean(sample[label == i], axis=0))        centroid = np.array(ct)    temp = sample.copy()    for i, lbl in enumerate(label):        if lbl == -1:            continue        temp[i] -= centroid[lbl]    temp = temp[label != -1]    W = np.matmul(temp.T, temp)    B = np.zeros((temp.shape[1], temp.shape[1]))    for i, cq in enumerate(centroid):        B += np.sum(label == i) * np.matmul((cq - CE).reshape(-1, 1), (cq - CE).reshape(1, -1))    return np.trace(B) / np.trace(W) * (NE - K) / (K - 1)if __name__ == '__main__':    from sklearn import metrics    sample = np.random.rand(100, 2)    label = np.random.choice(3, 100)    # visualize_cluster(sample, label)    s1 = calinski_harabasz_score(sample, label)    s2 = metrics.calinski_harabasz_score(sample, label)    print(s1, s2)